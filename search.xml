<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[build-jdk8]]></title>
      <url>/2017/08/22/build-jdk8/</url>
      <content type="html"><![CDATA[<p>Ubuntu1404-desktop-amd64 编译 open-jdk8 open-jdk7<br>在Ubuntu， netbeans8.2搭建openjdk7 的开发环境</p>
<a id="more"></a>
<blockquote>
<p>我在macos编译就没成功过，因为macos的gcc编译器是依赖于Xcode的，而Xcode在5.X以后就已经不支持gcc了而改为clang了。按照googke上的很多帖子试过，总是有无法解决致一系列莫名奇妙的问题发生<br>最后只能退而就其次，在macos安装Ubuntu虚拟机，进行编译。刚开始编译，自己也是一脸懵逼，一步一步google过来，期间碰到了十几个容易出错的问题，记录一下，给自己后面做参考。<br>我的笔记是记录在有道云笔记上的，因此这里挂出有道云笔记的链接<br><a href="http://note.youdao.com/noteshare?id=abba4c3dc2340b51e065fb56757dac0a" target="_blank" rel="external"> Ubuntu1404-desktop-amd64 编译 JDk7/8 搭建开发环境过程 </a><br>还是有挺多问题不明白，比如编译选项中的 fastdebug debug 和 product的区别，以及众多环境变量对编译产生的影响，编译出的各部件的连接关系，jdk 和hotspot的关系等等都有待去探究<br>另外很蛋疼的问题就是，每次编译都要花费半个小时！！！！！！！！！！！！！！！！！，感觉用虚拟机的小伙伴需要把内存和核数都给多一点。。。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> jdk8 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> build </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CPlus]]></title>
      <url>/2017/07/30/CPlus/</url>
      <content type="html"><![CDATA[<p>C++ notes<br><a id="more"></a><br><a href="/2017/07/30/CPlus/C++.pdf" title="C++ 笔记">C++ 笔记</a></p>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> notes </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Clion]]></title>
      <url>/2017/07/21/Clion/</url>
      <content type="html"><![CDATA[<p>Clion 快捷键<br><a id="more"></a><br><a href="/2017/07/21/Clion/Clion_KeyMap.pdf" title="Clion 快捷键">Clion 快捷键</a></p>
]]></content>
      
        <categories>
            
            <category> IDE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Clion </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[install git from source code]]></title>
      <url>/2017/04/26/install-git-from-source-code/</url>
      <content type="html"><![CDATA[<p>centos下 git从源码下载到编译到配置<br><a id="more"></a></p>
<h1 id="git从源码编译到配置环境"><a href="#git从源码编译到配置环境" class="headerlink" title="git从源码编译到配置环境"></a>git从源码编译到配置环境</h1><p>大家在使用centos系统做服务器的时候，一定发现了，centos为了系统的稳定性，软件的版本都特别老。本人最近想用git把本地的project push到远程VPS的no bare仓库中，但是发现我VPS的git的receive.denyCurrentBranch竟然不支持updateInstead选项。查看一下版本才发现VPS的git版本还是V1.8.0。于是有了自己从源码编译git的想法，在这期间遇到了一些恨奇怪的问题，在此与大家分享。</p>
<h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><blockquote>
<ul>
<li>操作系统：centos7.2</li>
</ul>
</blockquote>
<h2 id="需要安装的库"><a href="#需要安装的库" class="headerlink" title="需要安装的库"></a>需要安装的库</h2><p>若是条件允许，从源代码安装有很多好处，至少可以安装最新的版本。Git 的每个版本都在不断尝试改进用户体验，所以能通过源代码自己编译安装最新版本就再好不过了。有些 Linux 版本自带的安装包更新起来并不及时，所以除非你在用最新的 distro 或者 backports，那么从源代码安装其实该算是最佳选择。<br>Git 的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。在有 yum 的系统上（比如 Fedora）或者有 apt-get 的系统上（比如 Debian 体系），可以用下面的命令安装：</p>
<ul>
<li>对于yum用户 <code>sudo yum yum -y install gcc openssl openssl-devel curl curl-devel unzip perl perl-devel expat expat-devel zlib zlib-devel asciidoc xmlto gettext-devel openssh-clients</code></li>
</ul>
<h2 id="源码准备"><a href="#源码准备" class="headerlink" title="源码准备"></a>源码准备</h2><p>git的源码隐藏的比较深，我翻了很久才找到下载资源的官网链接 从下面链接中选取合适的版本后复制对应版本的链接 使用wget 命令下载用户目录。</p>
<blockquote>
<p><a href="https://www.kernel.org/pub/software/scm/git/" target="_blank" rel="external">git offical source code</a></p>
</blockquote>
<h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>当需要的库都准备完毕后<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar -zxf git-&lt;your-version&gt;.tar.gz</div><div class="line">cd git-&lt;your-version&gt;</div><div class="line">make prefix=/usr/local all</div><div class="line">sudo make prefix=/usr/local install</div></pre></td></tr></table></figure></p>
<h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vi ~/.bashrc</div><div class="line">PATH=/usr/local/bin:$&#123;PATH&#125;</div><div class="line">source ~/.bashrc</div><div class="line">git --vsersion</div></pre></td></tr></table></figure>
<p>如果没有出现问题的话，<code>git --version</code>就可以看到git 的版本了</p>
<blockquote>
<p>note: prefix中指定过的目录中会生成 lib64/ bin/ libexec/ share/四个文件夹， 切记不要去移动这四个文件夹 否则会发生不可预知的错误。<br> 我猜测是因为编译的时候指定了链接的位置，所以移动文件夹会出现不可预知的错误<br>如git 的alias无法使用 Expansion of alias ‘st’ failed; ‘status’ is not a command <img src="git-alias-error.png" alt="git-alias-error"></p>
</blockquote>
<h2 id="git常用个人设置"><a href="#git常用个人设置" class="headerlink" title="git常用个人设置"></a>git常用个人设置</h2><h3 id="bash界面显示分支名"><a href="#bash界面显示分支名" class="headerlink" title="bash界面显示分支名"></a>bash界面显示分支名</h3><p>当开发的工程有很多分支时，常常会忘记了自己在哪个分支，于是我们通过在~/.bashrc中采取一些设置即可实现下图效果<br><img src="git-branch-prompt.png" alt="git-branch-prompt"><br>将下面代码复制到~/.bashrc中 并 source ~/.bashrc 即可实现上述效果:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">find_git_branch () &#123;</div><div class="line">  local dir=. head</div><div class="line">  until [ "$dir" -ef / ]; do</div><div class="line">    if [ -f "$dir/.git/HEAD" ]; then</div><div class="line">      head=$(&lt; "$dir/.git/HEAD")</div><div class="line">      if [[ $head = ref:\ refs/heads/* ]]; then</div><div class="line">        git_branch=" → $&#123;head#*/*/&#125;"</div><div class="line">      elif [[ $head != '' ]]; then</div><div class="line">        git_branch=" → (detached)"</div><div class="line">      else</div><div class="line">        git_branch=" → (unknow)"</div><div class="line">      fi</div><div class="line">      return</div><div class="line">    fi</div><div class="line">    dir="../$dir"</div><div class="line">  done</div><div class="line">  git_branch=''</div><div class="line">&#125;</div><div class="line"></div><div class="line">PROMPT_COMMAND="find_git_branch; $PROMPT_COMMAND"</div><div class="line"><span class="meta">#</span> Heree</div><div class="line"></div><div class="line">black=$'\[\e[1;30m\]'</div><div class="line"></div><div class="line">red=$'\[\e[1;31m\]'</div><div class="line"></div><div class="line">green=$'\[\e[1;32m\]'</div><div class="line"></div><div class="line">yellow=$'\[\e[1;33m\]'</div><div class="line"></div><div class="line">blue=$'\[\e[1;34m\]'</div><div class="line"></div><div class="line">magenta=$'\[\e[1;35m\]'</div><div class="line"></div><div class="line">cyan=$'\[\e[1;36m\]'</div><div class="line"></div><div class="line">white=$'\[\e[1;37m\]'</div><div class="line"></div><div class="line">normal=$'\[\e[m\]'</div><div class="line"></div><div class="line">PS1="$white[$magenta\u$white@$green\h$white:$cyan\w$yellow\$git_branch$white]\$ $normal"</div></pre></td></tr></table></figure></p>
<h3 id="git设置difftool和mergetool"><a href="#git设置difftool和mergetool" class="headerlink" title="git设置difftool和mergetool"></a>git设置difftool和mergetool</h3><blockquote>
<figure class="highlight shell"><figcaption><span>在mac的~/.gitconfig下</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[diff]</div><div class="line">  tool = meld</div><div class="line">[difftool]</div><div class="line">  prompt = false</div><div class="line">[difftool "meld"]</div><div class="line">  trustExitCode = true</div><div class="line">  cmd = open -W -a Meld --args \"$LOCAL\" \"$PWD/$REMOTE\"</div><div class="line">[merge]</div><div class="line">  tool = meld</div><div class="line">[mergetool]</div><div class="line">  prompt = false</div><div class="line">[mergetool "meld"]</div><div class="line">  trustExitCode = true</div><div class="line">  cmd = open -W -a Meld --args --auto-merge \"$PWD/$LOCAL\" \"$PWD/$BASE\" \"$PWD/$REMOTE\" --output=\"$PWD/$MERGED\"</div></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>在linux的~/.gitconfig下</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Add the following to your .gitconfig file.</div><div class="line">[diff]</div><div class="line">    tool = meld</div><div class="line">[difftool]</div><div class="line">    prompt = false</div><div class="line">[difftool "meld"]</div><div class="line">    cmd = meld "$LOCAL" "$REMOTE"</div><div class="line"><span class="meta">#</span> Add the following to your .gitconfig file.</div><div class="line">[merge]</div><div class="line">    tool = meld</div><div class="line">[mergetool "meld"]</div><div class="line">    # Choose one of these 2 lines (not both!) explained below.</div><div class="line">    #cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"</div><div class="line">    cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"</div></pre></td></tr></table></figure>
<p>note: 强烈建议用户使用meld前先查看stackoverflow中的一个帖子 <a href="http://stackoverflow.com/questions/34119866/setting-up-and-using-meld-as-your-git-difftool-and-mergetool" target="_blank" rel="external">Setting up and using Meld as your git difftool and mergetool</a></p>
<h3 id="git-别名设置"><a href="#git-别名设置" class="headerlink" title="git 别名设置"></a>git 别名设置</h3><figure class="highlight shell"><figcaption><span>在linux的~/.gitconfig下</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[alias]</div><div class="line">  last = log -1</div><div class="line">  co = checkout</div><div class="line">  st = status</div><div class="line">  mt = mergetool</div><div class="line">  dt = difftool</div><div class="line">  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit</div><div class="line">  ps = push server master</div><div class="line">  br = branch</div><div class="line">  ci = commit</div></pre></td></tr></table></figure>
<h3 id="git-commit模板"><a href="#git-commit模板" class="headerlink" title="git commit模板"></a>git commit模板</h3><p>一个好的用户提交习惯对于开发过程中的debug是非常重要的，不仅可以更清楚自己的开发进度，也可以在项目出问题的时候更快的找到出问题的地方是在哪一次提交之后。并且在多人合作的开发中统一记录模板是十分有必要的<br>我的一个git commit 模板如下图所示<br><img src="git-commit-templete.png" alt="commit 模板"><br>feature: 本次提交是一个功能的开发<br>fix: 表示本次提交是一个bug的修复<br>debug: 也可以加一个debug标题，代表是对bug的尝试性修复，但是不知bug是已被完善，还需进一步测试<br>overview: 总结这次提交的信息<br>Deatiled Description: 详细信息分条列序<br>同时项目是否在本次提交中 build 通过， functionaltest(功能测试)是否通过 performancetest(性能测试)是否通过<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(Fix/Feature/Debug):</div><div class="line"></div><div class="line">Overview:</div><div class="line"></div><div class="line">Detailed Description:</div><div class="line">        1.</div><div class="line">        2.</div><div class="line"></div><div class="line">Build:</div><div class="line">FunctionalTest:</div><div class="line">PerformanceTest:</div></pre></td></tr></table></figure><br><strong>git设置模板</strong></p>
<ol>
<li>在用户根目录下创建 文件 .commit_template 复制上面内容</li>
<li>编辑~/.gitconfig文件，添加下面的内容<figure class="highlight shell"><figcaption><span>在linux的~/.gitconfig下</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[commit]</div><div class="line">        template = /Users/husterfox/.commit_template</div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<ul>
<li><a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="external">安装git</a></li>
<li>特别感谢 <strong>堂Di</strong> <a href="http://www.cnblogs.com/cuoreqzt/p/5848224.html" target="_blank" rel="external">在Shell提示符中显示Git分支名称</a></li>
<li>强烈建议用户使用前meld前先查看stackoverflow中的一个帖子 <a href="http://stackoverflow.com/questions/34119866/setting-up-and-using-meld-as-your-git-difftool-and-mergetool" target="_blank" rel="external">Setting up and using Meld as your git difftool and mergetool</a></li>
<li>更详细的git教程 可以关注<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b00" target="_blank" rel="external">廖雪峰老师的git教程</a></li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> centos </tag>
            
            <tag> source code </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
